#ifndef _SIMULA_MOLECULE_TYPE_DEFINE
#define _SIMULA_MOLECULE_TYPE_DEFINE

#include "global.h"

namespace simula {
	/**
	 * @brief Store molecule type information
	 * @var name
	 * @var amount
	 * @var data_id
	 * @var type_id
	 * @var size
	 * @var rpos
	 */
	class Molecule_Type {
	private:
		simString _name_; //< type name in string
		simI1  _amount_;  //< total amount of molecule will be created
		simI1  _tp_idx_;  //< type index defined by user
		simI1  _dd_idx_;  //< data index determined by the program (count from 1)
		simVI2 _rpos_;    //< relative position of components
		simVI1 _ridx_;    //< relative indices of components
	public:

		/**
		 * @defgroup Getters
		 * @{
		 */
		/** @brief get type name in string */
		inline const simString name() const { return _name_; }
		/** @brief get type total amount */
		inline const simI1   amount() const { return _amount_; }
		/** @brief get type reference index defined by user */
		inline const simI1  type_id() const { return _tp_idx_; }
		/** @brief get type index generated by program */
		inline const simI1  data_id() const { return _dd_idx_; }
		/** @brief get total number of components (dots) */
		inline const simI1   size() const { return _rpos_.size(); }
		/** @brief get vector containing component point positions */
		inline const simVI2& rpos() const { return _rpos_; }
		/** @} */

		/**
		 * @defgroup Setters
		 * @{
		 */
		/** @brief set type name **/
		void set_name(const simString& name);
		/** @brief set type index **/
		void set_data_id(const simI1 id);
		/** @brief set type index **/
		void set_type_id(const simI1 id);
		/** @brief set type amount **/
		void set_amount(const simI1 am);
		/** @brief set relative component position with a list of integer pairs **/
		void set_rpos(const simVI2& rpos, const simVI1& ridx);
		void set_rpos(const simI1 sz, const simI1* ls);
		/** @} */

#ifndef NDEBUG
		/** @brief debug function **/
		void debug();
#endif

	};
};

#endif // _SIMULA_MOLECULE_TYPE_DEFINE
