#ifndef _SIMULA_MOLECULE_TYPE_DEFINE
#define _SIMULA_MOLECULE_TYPE_DEFINE

#include "global.h"

namespace simula
{
  ////////////////////////////////////////////////////////////////////////////
  // Molecule Type class
  //
  class Molecule_Type {
  private:
    simString __name__; //< type name in string
    simI1   __amount__; //< total amount of molecule will be created
    simI1   __dd_idx__; //< hash index generated by the program

    simI1   __tp_idx__; //< type code defined by user

    simVI2 __rpos__; //< relative position of sub dots
    simVI1 __ridx__; //< r-pos index
  public:
    ////////////////////////////////////////////////////////////
    // Getter
    const simString name () const { return __name__;   }
    const simI1   amount () const { return __amount__; }

    const simI1  type_id () const { return __tp_idx__; }
    const simI1  data_id () const { return __dd_idx__; }

    const simI1   size () const { return __rpos__.size(); }
    const simVI2& rpos () const { return __rpos__; }

    ////////////////////////////////////////////////////////////
    // Setter
    /** @brief set type name **/
    void set_name (const simString& name) 
    {
      __name__ = name; 
    }

    /** @brief set type index **/
    void set_data_id (const simI1 id)
    {
      __dd_idx__ = id;
    }

    /** @brief set type index **/
    void set_type_id (const simI1 id)
    {
      __tp_idx__ = id;
    }

    /** @brief set type amount **/
    void set_amount (const simI1 am)
    {
      __amount__ = am;
    }

    /** @brief set relative component position with a list of integer pairs **/
    void set_rpos (const simVI2& rpos, const simVI1& ridx)
    {
      __rpos__ = rpos;
      __ridx__ = ridx;
    }

    void set_rpos (const simI1 sz, const simI1* ls)
    {
      for (simI1 i = 0; i < sz; ++i) {
	simI1 xid = 2 * i;
	simI1 yid = 2 * i + 1;
	__rpos__.push_back(simI2(ls[xid], ls[yid]));
      }
    }

#ifndef NDEBUG
    ////////////////////////////////////////////////////////////
    //** the debug function to print all properties **/
    void debug()
    {
      using namespace std;
      cout << "==> Molecule" << endl;
      cout << " ** name: "   << __name__   << endl;
      cout << " ** amount: " << __amount__ << endl;
      cout << " ** data index: " << __dd_idx__ << endl;
      cout << " ** type index: " << __tp_idx__ << endl;
      for (simI1 i = 0; i < this->size(); ++i) {
	cout << " ** rpos id = " << __ridx__[i] << " (";
	cout << __rpos__[i].x << ","  ;
	cout << __rpos__[i].y << ")\n";
      }
      cout << endl;
    }
#endif
    
  };
};

#endif // _SIMULA_MOLECULE_TYPE_DEFINE
